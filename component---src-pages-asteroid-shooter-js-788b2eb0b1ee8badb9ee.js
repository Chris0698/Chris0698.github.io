(self.webpackChunkchris_aston_web_portfolio=self.webpackChunkchris_aston_web_portfolio||[]).push([[380],{8908:function(e,a,t){"use strict";t.r(a),t.d(a,{default:function(){return i}});var o=t(7294),n=t(62),s=t.p+"static/asteroidVid-7d62890a78ef8595c63c6aec33abc608.mp4",i=function(){return o.createElement(n.Z,null,o.createElement("h1",{className:"projectHeading"},"Asteroid Shooter"),o.createElement("div",{id:"slideShow"},o.createElement("div",{className:"slideshowContainer"},o.createElement("div",{className:"slideShowInner"},o.createElement("div",{className:"slides"},o.createElement("video",{controls:!0,id:"asteroidShooterVideo"},o.createElement("source",{src:s,type:"video/mp4"})))))),o.createElement("div",{className:"projectInfo"},o.createElement("div",{className:"projectInfoCol1"},o.createElement("h2",null,"Overview"),o.createElement("p",null,'This was a university assignment. For this assignment, a basic "engine", developed using C++ and DirectX9, was provided. The assignment was to develop the engine further and to improve the code cohesion while having minimal coupling between the C++ classNamees. Design documentation, a class diagram and multiple sequence diagrams, with a short essay of the limitation of the engine were required. Finally, a small game had to be created to make use of the engine however game playability was not assessed. A simple game of shooting asteroids using a player-controlled ship was developed to satisfy this requirement. To improve the provided base engine different classes such as a player class, asteroid class, a game object and a game object manager class, where originally all the logic code was placed inside one Update method. I also had to manage memory leaks that can occur due to pointers, to handle this I used smart pointers throughout.'),o.createElement("p",null,"An advance component of the game was required which was to have a component-based architecture for the game objects. Each game object: bullets, player ship, explosions and asteroid had its components that handled player input, collision and health where appropriate. Each component such as ship collision overrides an abstract method from a Component super class so new components could be created and can be added to each object. A factory design pattern was additionally used for creating new game objects."),o.createElement("p",null,"This assignment helped with my debugging skills, using the Visual Studio debugging tools, to check for why a null pointer occurred or looking for why unexpected behavior that frequently happened during development."),o.createElement("p",null,"Additionally, in my spare time, I am working on improving this further by using a sprite sheet, adding a HUD, and add more levels of various difficulty.")),o.createElement("div",{className:"projectInfoCol2"},o.createElement("p",null,"Date: 2018 - 2019"),o.createElement("p",null,"Module Mark: 82"),o.createElement("a",{target:"_blank",rel:"noopener no referrer",href:"https://github.com/Chris0698/AsteroidGame",className:"codeButton"},"View Code"))))}}}]);
//# sourceMappingURL=component---src-pages-asteroid-shooter-js-788b2eb0b1ee8badb9ee.js.map